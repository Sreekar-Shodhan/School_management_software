{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Configure axios defaults\nconst axiosInstance = axios.create({\n  baseURL: `${API_URL}/api`,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\nconst logAxiosError = error => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.error('Response error data:', error.response.data);\n    console.error('Response error status:', error.response.status);\n    console.error('Response error headers:', error.response.headers);\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('Request error:', error.request);\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('Error message:', error.message);\n  }\n  console.error('Error config:', error.config);\n};\nexport const studentServices = {\n  // Create a new student\n  async createStudent(studentData) {\n    try {\n      console.log('Creating student with data:', studentData);\n      const response = await axiosInstance.post('/students', studentData);\n      console.log('Create student response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error('Error creating student:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  },\n  // Get all students with pagination\n  async getStudents(page = 1, limit = 10) {\n    try {\n      console.log('Getting students with pagination, page:', page, 'limit:', limit);\n      const response = await axiosInstance.get(`/students?page=${page}&limit=${limit}`);\n      console.log('Get students response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error('Error fetching students:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  },\n  // Get a single student by ID\n  async getStudentById(id) {\n    try {\n      console.log('Getting student by ID:', id);\n      const response = await axiosInstance.get(`/students/${id}`);\n      console.log('Get student by ID response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      console.error('Error fetching student:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      throw error;\n    }\n  },\n  // Update a student\n  async updateStudent(studentData) {\n    try {\n      console.log('Updating student with data:', studentData);\n      const response = await axiosInstance.put(`/students/${studentData.id}`, studentData);\n      console.log('Update student response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      console.error('Error updating student:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n      throw error;\n    }\n  },\n  // Delete a student\n  async deleteStudent(id) {\n    try {\n      console.log('Deleting student with ID:', id);\n      const response = await axiosInstance.delete(`/students/${id}`);\n      console.log('Delete student response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      console.error('Error deleting student:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","withCredentials","headers","logAxiosError","error","response","console","data","status","request","message","config","studentServices","createStudent","studentData","log","post","_error$response","getStudents","page","limit","get","_error$response2","getStudentById","id","_error$response3","updateStudent","put","_error$response4","deleteStudent","delete","_error$response5"],"sources":["/home/sreekar/CascadeProjects/school-management-system/frontend/src/services/studentServices.ts"],"sourcesContent":["import axios from 'axios';\nimport { Student, StudentCreateInput, StudentUpdateInput, StudentResponse, StudentsListResponse } from '../types/student';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Configure axios defaults\nconst axiosInstance = axios.create({\n    baseURL: `${API_URL}/api`,\n    withCredentials: true,\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n});\n\nconst logAxiosError = (error: any) => {\n    if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.error('Response error data:', error.response.data);\n        console.error('Response error status:', error.response.status);\n        console.error('Response error headers:', error.response.headers);\n    } else if (error.request) {\n        // The request was made but no response was received\n        console.error('Request error:', error.request);\n    } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message:', error.message);\n    }\n    console.error('Error config:', error.config);\n};\n\nexport const studentServices = {\n    // Create a new student\n    async createStudent(studentData: StudentCreateInput): Promise<StudentResponse> {\n        try {\n            console.log('Creating student with data:', studentData);\n            const response = await axiosInstance.post('/students', studentData);\n            console.log('Create student response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error creating student:', error.response?.data || error.message);\n            throw error;\n        }\n    },\n\n    // Get all students with pagination\n    async getStudents(page: number = 1, limit: number = 10): Promise<StudentsListResponse> {\n        try {\n            console.log('Getting students with pagination, page:', page, 'limit:', limit);\n            const response = await axiosInstance.get(`/students?page=${page}&limit=${limit}`);\n            console.log('Get students response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error fetching students:', error.response?.data || error.message);\n            throw error;\n        }\n    },\n\n    // Get a single student by ID\n    async getStudentById(id: number): Promise<StudentResponse> {\n        try {\n            console.log('Getting student by ID:', id);\n            const response = await axiosInstance.get(`/students/${id}`);\n            console.log('Get student by ID response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error fetching student:', error.response?.data || error.message);\n            throw error;\n        }\n    },\n\n    // Update a student\n    async updateStudent(studentData: StudentUpdateInput): Promise<StudentResponse> {\n        try {\n            console.log('Updating student with data:', studentData);\n            const response = await axiosInstance.put(`/students/${studentData.id}`, studentData);\n            console.log('Update student response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error updating student:', error.response?.data || error.message);\n            throw error;\n        }\n    },\n\n    // Delete a student\n    async deleteStudent(id: number): Promise<StudentResponse> {\n        try {\n            console.log('Deleting student with ID:', id);\n            const response = await axiosInstance.delete(`/students/${id}`);\n            console.log('Delete student response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error deleting student:', error.response?.data || error.message);\n            throw error;\n        }\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}