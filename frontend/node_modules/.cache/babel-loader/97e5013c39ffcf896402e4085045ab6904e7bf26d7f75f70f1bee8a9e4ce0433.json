{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Configure axios defaults\naxios.defaults.withCredentials = true;\nconst logAxiosError = error => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.error('Response error data:', error.response.data);\n    console.error('Response error status:', error.response.status);\n    console.error('Response error headers:', error.response.headers);\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('Request error:', error.request);\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('Error message:', error.message);\n  }\n  console.error('Error config:', error.config);\n};\nexport const studentServices = {\n  // Get all students with pagination\n  async getStudents(page = 1, limit = 10) {\n    try {\n      console.log('Getting students with pagination, page:', page, 'limit:', limit);\n      console.log('API URL:', `${API_URL}/students`);\n      const response = await axios.get(`${API_URL}/students`, {\n        params: {\n          page,\n          limit\n        }\n      });\n      console.log('Get students response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error fetching students:');\n      logAxiosError(error);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch students'\n      };\n    }\n  },\n  // Get a single student by ID\n  async getStudentById(id) {\n    try {\n      console.log('Getting student by ID:', id);\n      console.log('API URL:', `${API_URL}/students/${id}`);\n      const response = await axios.get(`${API_URL}/students/${id}`);\n      console.log('Get student by ID response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error fetching student:');\n      logAxiosError(error);\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch student'\n      };\n    }\n  },\n  // Create a new student\n  async createStudent(studentData) {\n    try {\n      console.log('Creating student with data:', studentData);\n      console.log('API URL:', `${API_URL}/students`);\n      const response = await axios.post(`${API_URL}/students`, studentData);\n      console.log('Create student response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error creating student:');\n      logAxiosError(error);\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create student'\n      };\n    }\n  },\n  // Update a student\n  async updateStudent(studentData) {\n    try {\n      console.log('Updating student with data:', studentData);\n      console.log('API URL:', `${API_URL}/students/${studentData.id}`);\n      const response = await axios.put(`${API_URL}/students/${studentData.id}`, studentData);\n      console.log('Update student response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error updating student:');\n      logAxiosError(error);\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update student'\n      };\n    }\n  },\n  // Delete a student\n  async deleteStudent(id) {\n    try {\n      console.log('Deleting student with ID:', id);\n      console.log('API URL:', `${API_URL}/students/${id}`);\n      const response = await axios.delete(`${API_URL}/students/${id}`);\n      console.log('Delete student response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error deleting student:');\n      logAxiosError(error);\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete student'\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","defaults","withCredentials","logAxiosError","error","response","console","data","status","headers","request","message","config","studentServices","getStudents","page","limit","log","get","params","_error$response","_error$response$data","success","getStudentById","id","_error$response2","_error$response2$data","createStudent","studentData","post","_error$response3","_error$response3$data","updateStudent","put","_error$response4","_error$response4$data","deleteStudent","delete","_error$response5","_error$response5$data"],"sources":["/home/sreekar/CascadeProjects/school-management-system/frontend/src/services/studentServices.ts"],"sourcesContent":["import axios from 'axios';\nimport { Student, StudentCreateInput, StudentUpdateInput, StudentResponse, StudentsListResponse } from '../types/student';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Configure axios defaults\naxios.defaults.withCredentials = true;\n\nconst logAxiosError = (error: any) => {\n    if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.error('Response error data:', error.response.data);\n        console.error('Response error status:', error.response.status);\n        console.error('Response error headers:', error.response.headers);\n    } else if (error.request) {\n        // The request was made but no response was received\n        console.error('Request error:', error.request);\n    } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error message:', error.message);\n    }\n    console.error('Error config:', error.config);\n};\n\nexport const studentServices = {\n    // Get all students with pagination\n    async getStudents(page: number = 1, limit: number = 10): Promise<StudentsListResponse> {\n        try {\n            console.log('Getting students with pagination, page:', page, 'limit:', limit);\n            console.log('API URL:', `${API_URL}/students`);\n            \n            const response = await axios.get(`${API_URL}/students`, {\n                params: { page, limit }\n            });\n            console.log('Get students response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error fetching students:');\n            logAxiosError(error);\n            return {\n                success: false,\n                error: error.response?.data?.message || 'Failed to fetch students'\n            };\n        }\n    },\n\n    // Get a single student by ID\n    async getStudentById(id: number): Promise<StudentResponse> {\n        try {\n            console.log('Getting student by ID:', id);\n            console.log('API URL:', `${API_URL}/students/${id}`);\n            \n            const response = await axios.get(`${API_URL}/students/${id}`);\n            console.log('Get student by ID response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error fetching student:');\n            logAxiosError(error);\n            return {\n                success: false,\n                error: error.response?.data?.message || 'Failed to fetch student'\n            };\n        }\n    },\n\n    // Create a new student\n    async createStudent(studentData: StudentCreateInput): Promise<StudentResponse> {\n        try {\n            console.log('Creating student with data:', studentData);\n            console.log('API URL:', `${API_URL}/students`);\n            \n            const response = await axios.post(`${API_URL}/students`, studentData);\n            console.log('Create student response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error creating student:');\n            logAxiosError(error);\n            return {\n                success: false,\n                error: error.response?.data?.message || 'Failed to create student'\n            };\n        }\n    },\n\n    // Update a student\n    async updateStudent(studentData: StudentUpdateInput): Promise<StudentResponse> {\n        try {\n            console.log('Updating student with data:', studentData);\n            console.log('API URL:', `${API_URL}/students/${studentData.id}`);\n            \n            const response = await axios.put(`${API_URL}/students/${studentData.id}`, studentData);\n            console.log('Update student response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error updating student:');\n            logAxiosError(error);\n            return {\n                success: false,\n                error: error.response?.data?.message || 'Failed to update student'\n            };\n        }\n    },\n\n    // Delete a student\n    async deleteStudent(id: number): Promise<StudentResponse> {\n        try {\n            console.log('Deleting student with ID:', id);\n            console.log('API URL:', `${API_URL}/students/${id}`);\n            \n            const response = await axios.delete(`${API_URL}/students/${id}`);\n            console.log('Delete student response:', response.data);\n            return response.data;\n        } catch (error: any) {\n            console.error('Error deleting student:');\n            logAxiosError(error);\n            return {\n                success: false,\n                error: error.response?.data?.message || 'Failed to delete student'\n            };\n        }\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}